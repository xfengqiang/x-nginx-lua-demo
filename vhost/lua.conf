lua_package_path "$prefix/conf/lualib/?.lua;;";
lua_shared_dict shm_data 10m;
lua_shared_dict shm_req_limit_store 10m;
lua_shared_dict shm_conn_limit_store 10m;
init_worker_by_lua_file conf/lualib/x_init.lua;
rewrite_by_lua_file conf/lualib/set_x_log_id.lua;


server{
    listen 80;
    server_name lua.x.vm;
    
    # lua 返回数据
    location /hello {
        default_type 'text/plain';
        content_by_lua_block {
            ngx.say('Hello Nginx Lua!')
            ngx.log(ngx.WARN, "This is a test lua log")
        }
    }
    
    location  ~ \.php?.*$ {
        default_type 'text/plain';
        root /data/www/luademo;
        fastcgi_pass   127.0.0.1:9000;
        fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;  
        include fastcgi_params;
    }
   
    #设置共享内存
    location /shm_set {
        default_type 'text/plain';
        content_by_lua_block {
            local data = ngx.shared.shm_data;
            data:set("test_key", "Value from shm")
            ngx.say("set ok")
        }
    }

    #获取共享内存数据
    location /shm_get {
        default_type 'text/plain';
        content_by_lua_block {
            local data = ngx.shared.shm_data;
            ngx.say(data:get("test_key"))
        }
    }

    # 发送http请求 
    location /http_get {
        default_type 'text/plain';
        resolver 8.8.8.8;
       content_by_lua '
           local http = require "resty.http"
           local httpc = http.new()
            local res, err = httpc:request_uri("http://www.qq.com", {
                method = "GET",
                body = "a=1",
                headers = {
                    ["Content-type"] = "text/plain",
                }
            })
            if not res then 
                ngx.say("request failed", err)
                return
            end
            
            ngx.status = res.status
            ngx.say(res.body)
       '; 
    }

    # 通过json库处理json数据
    location /json {
        default_type 'text/plain';
        content_by_lua_block {
            local json = require("json")
            local t = {}
            t['key'] = 'value'
            ngx.say(json.encode(t))
        }
    }
    
    
    # 模拟配置文件下发接口
    location /get_config {
        default_type 'text/plain';
        content_by_lua_block {
            local json = require("json")
            local t = {}
            t['key1'] = 'value1'
            ngx.say(json.encode(t))
        }
    }

    # 文件操作
    location /log {
        default_type 'text/plain';
        content_by_lua_block {
            local x_util = require('x.util')
            x_util.write_log('info', 'write a lua log')
            ngx.say("log write ok")
        }
    }
    
    # 基于单位时间内请求次数进行访问限流
    location ~ /limit_req {
        default_type 'text/plain';
        access_by_lua_file conf/lualib/x_limit_req.lua; 

        content_by_lua_block {
            ngx.say("hello limit")
        }
        #root /data/www/luademo;
        #fastcgi_pass   127.0.0.1:9000;
        #fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;
        #include fastcgi_params;

    }

    # 基于单位时间内访问次数和连接数进行限流
    location ~ /limit_traffic {
        default_type 'text/plain';
        access_by_lua_file conf/lualib/x_limit_traffic_access.lua; 

        content_by_lua_block {
            ngx.say("hello limit")
        }

        log_by_lua_file conf/lualib/x_limit_traffic_log.lua;
    }
    
}
